#!/bin/bash

# Latest stable versions as of 6th June 2024
KERNEL_VERSION=6.9
BUSYBOX_VERSION=1.36.1

KERNEL_URL=https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-$KERNEL_VERSION.tar.gz
BUSYBOX_URL=https://busybox.net/downloads/busybox-$BUSYBOX_VERSION.tar.bz2

TOP_DIR=$(pwd)

download_kernel_source() {
  wget $KERNEL_URL
  tar -xvf linux-$KERNEL_VERSION.tar.gz
  rm linux-$KERNEL_VERSION.tar.gz
}

download_busybox() {
  wget $BUSYBOX_URL
  tar -xvf busybox-$BUSYBOX_VERSION.tar.bz2
  rm busybox-$BUSYBOX_VERSION.tar.bz2
}

configure_and_build_busybox() {
  cd busybox-$BUSYBOX_VERSION
  mkdir -p $TOP_DIR/build/busybox
  make O=$TOP_DIR/build/busybox defconfig
  # Enable static build, so we don't need to worry about shared libraries
  sed -i 's/# CONFIG_STATIC is not set/CONFIG_STATIC=y/' $TOP_DIR/build/busybox/.config
  cd $TOP_DIR/build/busybox
  make -j2
  make install
}

create_minimal_filesystem() {
  mkdir -p $TOP_DIR/build/initramfs/busybox
  cd $TOP_DIR/build/initramfs/busybox
  mkdir -pv {bin,sbin,etc,proc,sys,usr/{bin,sbin}}
  cp -av $TOP_DIR/build/busybox/_install/* .
}

configure_init_script() {
  cat << 'EOF' > "$TOP_DIR/build/initramfs/busybox/init"
#!/bin/sh

mount -t proc none /proc
mount -t sysfs none /sys
mount -t devtmpfs devtmpfs /dev

# Set up mdev for device management
mdev -s

# Check if /dev/sda1 exists, if not, partition and format the disk
if [ ! -b /dev/sda1 ]; then
  echo "Partitioning the disk"
  fdisk /dev/sda << EOFFDISK
o
n
p
1


w
EOFFDISK
fi

# Check for existing filesystem
FILESYSTEM=$(blkid -o value -s TYPE /dev/sda1)

if [ -z "$FILESYSTEM" ]; then
  echo "Creating filesystem on /dev/sda1"
  /sbin/mke2fs /dev/sda1
else
  echo "Filesystem already exists on /dev/sda1: $FILESYSTEM"
fi

mkdir /mnt
mount /dev/sda1 /mnt

# Create essential directories

if [ -z "$FILESYSTEM" ]; then
  mkdir /mnt/bin
  mkdir /mnt/sbin
  mkdir /mnt/etc
  mkdir /mnt/proc
  mkdir /mnt/sys
  mkdir /mnt/dev
  mkdir /mnt/lib
  mkdir -p /mnt/usr/bin
  mkdir -p /mnt/usr/sbin


  # Copy BusyBox and create symlinks for common utilities
  cp /bin/busybox /mnt/bin/
  for applet in $(/bin/busybox --list); do
    ln -s /bin/busybox /mnt/bin/$applet
  done

  # Copy the BusyBox init binary
  cp /bin/busybox /mnt/sbin/init

  # Create a basic inittab
  cat << 'EOFINITTAB' > /mnt/etc/inittab
  ::sysinit:/bin/mount -t proc proc /proc
  ::sysinit:/bin/mount -t sysfs sysfs /sys
  ::sysinit:/bin/mount -t devtmpfs devtmpfs /dev

  ::respawn:/bin/sh
  ::askfirst:/bin/sh
  ::ctrlaltdel:/bin/umount -a -r
  ::shutdown:/bin/umount -a -r
EOFINITTAB
fi

echo -e "\nhello world\n"
exec /bin/sh

EOF
  chmod +x $TOP_DIR/build/initramfs/busybox/init
}

generate_initramfs() {
  cd $TOP_DIR/build/initramfs/busybox
  # Find all files and directories and create a cpio archive to be used as the initramfs
  find . -print0 | cpio --null -ov --format=newc | gzip -9 > $TOP_DIR/build/initramfs-busybox-x86.cpio.gz
}

configure_and_build_kernel() {
  cd $TOP_DIR/linux-$KERNEL_VERSION
  make O=$TOP_DIR/build/linux-simple x86_64_defconfig
  make O=$TOP_DIR/build/linux-simple kvmconfig
  make O=$TOP_DIR/build/linux-simple -j2
}

execute_qemu_virtual_machine() {
  cd $TOP_DIR
  # Run the kernel with the initramfs. Have not enabled kvm, so it will be slower
  # but it will work without root permissions.
  # To enable it, add -enable-kvm
  qemu-system-x86_64 \
    -kernel build/linux-simple/arch/x86_64/boot/bzImage \
    -initrd build/initramfs-busybox-x86.cpio.gz \
    -drive file=emudisk.qcow2,format=qcow2 \
    -append "root=/dev/sda console=ttyS0" \
    -nographic
}

create_emulated_disk_if_it_doesnt_exist() {
    if [ ! -f emudisk.qcow2 ]; then
        qemu-img create -f qcow2 emudisk.qcow2 512M 
    else
        echo "emudisk.qcow2 already exists"
    fi
}

create_emulated_disk_if_it_doesnt_exist
download_kernel_source
download_busybox
configure_and_build_busybox
create_minimal_filesystem
configure_init_script
generate_initramfs
configure_and_build_kernel
execute_qemu_virtual_machine

